!obj:pylearn2.train.Train {
    dataset: &train !obj:forgetting.datasets.amazon.AmazonSmall {
        which_set: 'train',
        category: 'kitchen',
        one_hot: 1,
        start: 0,
        stop: 1000
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [ !obj:forgetting.lwta.LWTA {
                     max_col_norm: %(h0_col_norm)f,
                     layer_name: 'h0',
                     dim: %(h0_dim)d,
                     block_size: %(num_pieces_0)d,
                     %(h0_init)s,
                     init_bias: %(h0_bias)f
                         },
                 !obj:forgetting.lwta.LWTA {
                     max_col_norm: %(h1_col_norm)f,
                     layer_name: 'h1',
                     dim: %(h1_dim)d,
                     block_size: %(num_pieces_1)d,
                     %(h1_init)s,
                     init_bias: %(h1_bias)f
                 }, !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: %(y_col_norm)f,
                     layer_name: 'y',
                     n_classes: 2,
                     %(y_init)s
                 }
                ],
        nvis: 5000,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: %(learning_rate)f,
        init_momentum: .5,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:forgetting.datasets.amazon.AmazonSmall {
                    which_set: 'train',
                    category: 'kitchen',
                    one_hot: 1,
                    start: 1000,
                    stop: 1600
                },
                'test' : !obj:forgetting.datasets.amazon.AmazonSmall {
                    which_set: 'test',
                    category: 'kitchen',
                    one_hot: 1,
                },
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.mlp.Default {},
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 100
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        }, !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: %(msat)d,
            final_momentum: %(final_momentum)f
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
            start: 1,
            saturate: %(lr_sat)d,
            decay_factor: %(decay)f
        }
    ]
}
